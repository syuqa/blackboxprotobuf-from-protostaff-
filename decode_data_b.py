# -*- coding: utf-8 -*-
import blackboxprotobuf
import struct
import json

from datetime import datetime



class PaserDataByterrayForMapping:
    def __init__(self, data_b) -> None:
        # #print(data_b)
        self.somebytes = data_b.replace(r'\xa', '')
        self.barray = bytearray.fromhex(self.somebytes)
        self.jsonpb = blackboxprotobuf.decode_message(self.barray)
        self.data = self.jsonpb[0]
        self.model = self.jsonpb[1]
        print(self.data)


    def group(self, group_typedef, data, _data_object={}):
        data_object = _data_object
        types = {}
        for index, propertyes in group_typedef.items():
            types[index] = propertyes.get("type")

        # Одноуровневые структуры
        if [*types.values()].count('bytes') == 2 or len([*types.values()]) == 2 and [*types.values()].count(
                'bytes') == 1 and [*types.values()].count('group') == 0:
            items = self.parse_data(data, [*types.keys()])
            data_object = {**data_object, **items}

        # Многоуровневые структуры
        if [*types.values()].count('group') == 1:
            group_index = [*types.values()].index('group')
            group_name = [*types.keys()][group_index]
            items_ = self.parse_data(data, [*types.keys()])
            for key, value in items_.items():
                if not isinstance(value, dict) and not isinstance(value, list):
                    data_object = {**data_object, **items_}
                else:
                    group = group_typedef.get(group_name)
                    group_typedef_ = group.get('group_typedef')
                    value_ = self.group(group_typedef_, value)
                    data_object[key] = value_
        elif [*types.values()].count('group') == 2:
            data_object = []
            for group in data:
                container_data_object = []
                for key, value in group.items():
                    _group_typedef = group_typedef.get(key)
                    container_data_object.append(self.group(_group_typedef.get('group_typedef'), value))
                data_object.append(container_data_object)

        return data_object

    def decode_date(self, data):
        try:
            if len(data) == 6:
                decode_data = struct.unpack_from('!iBB', data)
                return '.'.join([str(b) for b in decode_data])
            elif len(data) == 13:
                decode_data = struct.unpack_from('!iiBBBBB', data)
                return datetime(decode_data[0], decode_data[2], decode_data[3], decode_data[4], decode_data[5],
                                decode_data[6]).strftime("%Y-%m-%d, %H:%M:%S")
        except (struct.error, ValueError, IndexError) as e:
            return str(e)

    def data_decode(self, data):
        if isinstance(data, bytearray):
            try:
                return data.decode()
            except Exception as e:
                return self.decode_date(data)
        else:
            return data

    def parse_data(self, data, indexses):
        result = {}

        if isinstance(data, list):
            for line in data:
                if len(indexses) == 2:
                    l1 = self.data_decode(line.get(indexses[0]))
                    l2 = self.data_decode(line.get(indexses[1]))
                    if isinstance(l1, str):
                        result[l1] = l2
                    else:
                        result[l2] = l1
        elif isinstance(data, dict):
            d1 = self.data_decode(data.get(indexses[0]))
            d2 = self.data_decode(data.get(indexses[1]))
            if isinstance(d1, str):
                result[d1] = d2
            else:
                result[d2] = d1

        return result

    def parse(self):
        data = self.data
        data_object = {}
        for index, propertyes in self.model.items():
            if propertyes.get("type") == 'group':
                _data = self.group(propertyes.get('group_typedef'), data.get(index), data_object)
                data_object = {**data_object, **_data}
        return data_object

    def parse_to_json(self):
        return json.dumps(self.parse())



# забрать значение в HEX из базы данных
#select *,  encode(data_b::bytea, 'hex')  limit 1;
# подставить ниже в DATA

# простой пример
# data = r'd303d20f126c6173745f76657269666965645f64617465d403ab03d20f0770656e64696e67ac039303d20f0c6368726f6e69636c655f696494039303d20f0f7269705f726567696f6e5f6e616d6594039b03d20f09737065635f74797065e012009c03d303d20f0c6578745f7570645f64617465d4039303d20f1064656174685f706c6163655f636f64659403ab03d20f0d6861735f70726976696c656765ac039303d20f0d7472616e73616374696f6e696494039303d20f1462697274685f706c6163655f6c696e655f6f6e65fa1271d0a0d0bed181d181d0b8d0b9d181d0bad0b0d18f20d0a4d0b5d0b4d0b5d180d0b0d186d0b8d18f2c20d0a1d0b5d0b2d0b5d180d0be2dd097d0b0d0bfd0b0d0b4d0bdd18bd0b92c20d093d0bed180d0bed0b420d180d0bed0b6d0b4d0b5d0bdd0b8d18f2c20d0a1d0b5d182d183d0bdd18c94039b03d20f0a6661696c65646d61736be012009c039303d20f0b7669705f636f6d6d656e7494039303d20f0c74656d706f726172795f6964fa122439343432613937352d643234352d343863362d623735322d6331393964623862313161359403ab03d20f03766970ac039303d20f107269705f636f756e7472795f6e616d6594039303d20f0e676976656e5f6e616d655f74776ffa1212d095d0a0d09ed0a4d095d095d092d09dd0909403ab03d20f0d7265736964656e745f7369676eac039303d20f0e67656e6465725f74705f636f6465fa1201469403d303d20f1a70726976696c6567655f636f6e74726f6c5f656e645f64617465d403d303d20f1670726976696c6567655f636f6e74726f6c5f64617465d4039303d20f097269705f706c6163659403d303d20f087269705f64617465d4039303d20f0b6c696e6b65645f6573696194039303d20f096c6173745f6e616d65fa120ed095d0a1d090d0a4d09ed092d0909403d303d20f0e6c6173745f7570646174655f6474a2130d000007e61e65fb80041416102dd4039303d20f0d7269705f636974795f6e616d6594039303d20f1864656174685f63697263756d7374616e6365735f636f64659403d303d20f0862697274685f6474a2130d000007e5197380c007090b1533d403bb09d20f0e736f757263656368616e6e656c73901c0f901c08bc09d303d20f12706e616d655f6578745f7570645f64617465d4039303d20f0e676976656e5f6e616d655f6f6e65fa1210d094d096d095d09dd095d0a0d098d09a9403ab03d20f1170726976696c6567655f636f6e74726f6cac039b03d20f0a64697274797374616765e012019c03ab03d20f0864656c5f7369676ef01200ac039303d20f0d63685f646174615f70686f746f94039303d20f0a7072696d6172795f6964fa122230392e30372e323032312031313a32313a353120d095d0a1d090d0a4d09ed092d09094039b03d20f0e76616c69646174696f6e6d61736be012109c039b03d20f0d736f757263656368616e6e656ce012089c03ab03d20f1469735f636f6e6669726d65645f6f66666c696e65ac03'


# Пример со вложенной структурой
#data = r'c30cd20f06656d61696c730b9303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120bd0bfd0bed187d182d0b03194039303d20f077669645f726566fa122431323537353663362d643535662d343431312d623264302d65386364353331383764376694030c0b9303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120bd0bfd0bed187d182d0b03294030cc40cc30cd20f096164647265737365730b9303d20f0463697479fa120bd093d0bed180d0bed0b4319403ab03d20f2269735f706f7374616c5f616464726573735f69735f73616d655f61735f6c6567616cf01201ac039303d20f0c61646d5f6469737472696374fa120bd093d0bed180d0bed0b43194039303d20f116c6f63616c6974795f747970655f726566fa120331333194039303d20f05686f757365fa12013994039303d20f0a736574746c656d656e74fa1226d0b3d0bed180d0bed0b4d181d0bad0bed0b520d0bfd0bed181d0b5d0bbd0b5d0bdd0b8d0b53194039303d20f06737472656574fa120bd183d0bbd0b8d186d0b03194039303d20f04666c6174fa12013494039303d20f046c616e64fa120636343733373394039303d20f05626c6f636bfa1202363794039303d20f12706c616e6e696e675f737472756374757265fa120ad180d0b0d0b9d0bed0bd94039303d20f077669645f726566fa122465303664326231662d633438302d343835642d613237382d31393064653664343635613694039303d20f0d6469766973696f6e5f74797065fa12013494039303d20f0e686f7573655f747970655f726566fa1202313494039303d20f1561646d5f64697374726963745f747970655f726566fa12013694039303d20f086c6f63616c697479fa1209d183d0bbd183d1813194039303d20f1b706c616e6e696e675f7374727563747572655f747970655f726566fa120331303694039303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120bd090d0b4d180d0b5d1813194039303d20f28747970655f7365636f6e645f6164646974696f6e616c5f706172745f686f7573655f6e756d626572fa12013394039303d20f18736574746c656d656e745f747970655f747970655f726566fa12013294039303d20f0c6d756e5f6469737472696374fa1211d0a0d0b0d0b9d0bed0bd20d0bcd183d0bd94039303d20f0b696e7374616e63655f6964fa122435646361626437362d396637322d313165652d386666642d6537663738316236663235659403ab03d20f2269735f61637475616c5f616464726573735f69735f73616d655f61735f6c6567616cf01201ac039303d20f0467756964fa122435646361626437342d396637322d313165652d386666642d65376637383162366632356594039303d20f0d666c61745f747970655f726566fa1202323694039303d20f06726567696f6efa120dd180d0b5d0b3d0b8d0bed0bd3194030c0b9303d20f0f726567696f6e5f747970655f726566fa12013994039303d20f0463697479fa120bd0b3d0bed180d0bed0b4329403ab03d20f2269735f706f7374616c5f616464726573735f69735f73616d655f61735f6c6567616cf01201ac039303d20f0e686f7573655f747970655f726566fa1202313294039303d20f086c6f63616c697479fa1212d0bdd0b0d1812ed0bfd183d0bdd0bad1823294039303d20f05686f757365fa1202343594039303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120bd0b0d0b4d180d0b5d1813294039303d20f0a736574746c656d656e74fa120633373733383394039303d20f156d756e5f64697374726963745f747970655f726566fa12013594039303d20f0c6d756e5f6469737472696374fa1225d0bcd183d0bdd0b8d186d0b8d0bfd0b0d0bbd18cd0bdd18bd0b920d180d0b0d0b9d0bed0bd94039303d20f0f7374726565745f747970655f726566fa120331313194039303d20f0b696e7374616e63655f6964fa122435646361626437352d396637322d313165652d386666642d6537663738316236663235659403ab03d20f2269735f61637475616c5f616464726573735f69735f73616d655f61735f6c6567616cf01201ac039303d20f06737472656574fa1202343594039303d20f04666c6174fa1205373337333794039303d20f0d636974795f747970655f726566fa1202313894039303d20f0467756964fa122435646361626437332d396637322d313165652d386666642d65376637383162366632356594039303d20f05626c6f636bfa12043233343494039303d20f06726567696f6efa120dd180d0b5d0b3d0b8d0bed0bd3394039303d20f077669645f726566fa122465303664326231662d633438302d343835642d613237382d31393064653664343635613694030cc40c9303d20f04636f6465fa12093030303133303238389403c303d20f0d646174655f6f665f6269727468921306000007e70c0cc4039303d20f046e616d65fa1208d182d0b5d181d1829403c30cd20f0670686f6e65730b9303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120fd182d0b5d0bbd0b5d184d0bed0bd3194030c0b9303d20f17706572666f726d616e63655f636f6e746163745f696e66fa120fd182d0b5d0bbd0b5d184d0bed0bd3294039303d20f077669645f726566fa122466656239356466332d396530372d346262322d613461382d63633032633331663861333794030cc40c9303d20f13747970655f636f6e746163745f706572736f6efa12013294039303d20f08706f736974696f6efa1223d182d0b5d181d182d0bed0b2d0b0d18f20d0b4d0bed0bbd0b6d0bdd0bed181d182d18c94039303d20f0b617070656c6c6174696f6efa1222d182d0b5d181d182d0bed0b2d0bed0b520d09ad09b2028d0b0d0b4d180d0b5d1812994039303d20f0b6d6964646c655f6e616d65fa1211d182d0b5d181d182d0bed0b2d0b8d1873194039303d20f087375725f6e616d65fa1210d182d0b5d181d182d0bed0b2d18bd0b99403'


#result = PaserDataByterrayForMapping.parse( PaserDataByterrayForMapping(data) )

#print(result)


#print(json.dumps(result, indent=4))
